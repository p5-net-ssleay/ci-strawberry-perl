name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: 'Strawberry Perl ${{ matrix.version }} ${{ matrix.flavour }}'
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        version:
          - '5.24.1.1'
        flavour:
          - x64
        #exclude:
    steps:
      - name: Create GitHub release for Strawberry Perl ${{ matrix.version }}
        uses: actions/github-script@v5
        id: release
        env:
          VERSION: ${{ matrix.version }}
          FLAVOUR: ${{ matrix.flavour }}
        with:
          script: |
            const { VERSION, FLAVOUR } = process.env;

            try {
              var r = (await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                tag:   VERSION,
              })).data;
            } catch (e) {
              if (e.status == 404) {
                var r = (await github.rest.repos.createRelease({
                  owner:            context.repo.owner,
                  repo:             context.repo.repo,
                  tag_name:         VERSION,
                  target_commitish: context.sha,
                  name:             `Strawberry Perl ${VERSION}`,
                  draft:            false,
                  prerelease:       false,
                })).data;
              } else {
                throw e;
              }
            }

            const prefix = `strawberry-perl-${VERSION}-${FLAVOUR}`;
            const upstream = r.assets.find(a => a.name == `${prefix}.upstream.zip`);
            const minified = r.assets.find(a => a.name == `${prefix}.minified.zip`);

            return {
              release_id:        r.id,
              target_commit:     r.target_commitish,
              upstream_asset:    typeof upstream === "undefined" ? null : { id: upstream.id, url: upstream.browser_download_url },
              minified_asset_id: typeof minified === "undefined" ? null : minified_asset.id,
            };

      - name: Update commit hash for ${{ matrix.version }} tag
        if: ${{ github.sha != fromJson(steps.release.outputs.result).target_commit }}
        uses: actions/github-script@v5
        with:
          script: |
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:   "tags/${{ matrix.version }}",
              sha:   context.sha,
              force: true,
            });

      - name: Update target commit hash for GitHub release
        if: ${{ github.sha != fromJson(steps.release.outputs.result).target_commit }}
        uses: actions/github-script@v5
        env:
          RELEASE_ID: ${{ fromJson(steps.release.outputs.result).release_id }}
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner:            context.repo.owner,
              repo:             context.repo.repo,
              release_id:       process.env.RELEASE_ID,
              target_commitish: context.sha,
            });

      - name: Check out ci-strawberry-perl
        uses: actions/checkout@v2

      - name: Check out p5-net-ssleay
        uses: actions/checkout@v2
        with:
          repository: radiator-software/p5-net-ssleay
          ref: master
          path: p5-net-ssleay

      - name: Install Strawberry Perl ${{ matrix.version }} ${{ matrix.flavour }}
        env:
          VERSION: ${{ matrix.version }}
          FLAVOUR: ${{ matrix.flavour }}
          UPSTREAM_URL: ${{ fromJson(steps.release.outputs.result).upstream_asset.url }}
        run: |
          if ($Env:UPSTREAM_URL -eq "") {
            $filename = switch ($Env:FLAVOUR) {
              "x64"      { "strawberry-perl-$Env:VERSION-64bit.zip" }
              "x86"      { "strawberry-perl-$Env:VERSION-32bit.zip" }
              "x86_no64" { "strawberry-perl-no64-$Env:VERSION-32bit.zip" }
            }
            $url = "https://strawberryperl.com/download/$Env:VERSION/$filename"
          } else {
            $url = $Env:UPSTREAM_URL
          }
          
          Invoke-WebRequest `
            -Uri $url `
            -OutFile strawberry.zip

          Expand-Archive `
            -Path strawberry.zip `
            -DestinationPath C:\strawberry

          if (Test-Path -Path C:\strawberry\relocation.pl.bat -PathType Leaf) {
            C:\strawberry\relocation.pl.bat
          }

          if (Test-Path -Path C:\strawberry\c\bin\dmake.exe -PathType Leaf) {
            $make = "C:\strawberry\c\bin\dmake.exe"
          }
          else {
            $make = "C:\strawberry\c\bin\gmake.exe"
          }

          $Env:Path = "C:\strawberry\perl\bin;C:\strawberry\c\bin;$Env:Path"

      - name: Upload upstream Strawberry Perl ${{ matrix.version }} ${{ matrix.flavour }} archive as release artifact
        if: ${{ fromJson(steps.release.outputs.result).upstream_asset.id == null }}
        uses: actions/github-script@v5
        env:
          VERSION: ${{ matrix.version }}
          FLAVOUR: ${{ matrix.flavour }}
          RELEASE_ID: ${{ fromJson(steps.release.outputs.result).release_id }}
        with:
          script: |
            const { VERSION, FLAVOUR, RELEASE_ID } = process.env;

            await github.rest.repos.uploadReleaseAsset({
              owner:      context.repo.owner,
              repo:       context.repo.repo,
              release_id: RELEASE_ID,
              name:       `strawberry-perl-${VERSION}-${FLAVOUR}.upstream.zip`,
              data:       require("fs").readFileSync("strawberry.zip"),
            });

      - name: Restore cached Process Monitor executable
        uses: actions/cache@v2
        with:
          path: Procmon64.exe
          key: procmon

      - name: Start Process Monitor
        run: |
          if (-not(Test-Path -Path Procmon64.exe -PathType Leaf)) {
            Invoke-WebRequest `
              -Uri https://download.sysinternals.com/files/ProcessMonitor.zip `
              -OutFile ProcessMonitor.zip

            Expand-Archive `
              -Path ProcessMonitor.zip

            Move-Item `
              -Path ProcessMonitor\Procmon64.exe `
              -Destination .
          }

          Start-Process `
            -FilePath Procmon64.exe `
            -ArgumentList "/AcceptEula /LoadConfig strawberry.pmc /BackingFile test.pml /Quiet /Minimized" `
            -NoNewWindow

          Start-Process `
            -FilePath Procmon64.exe `
            -ArgumentList "/AcceptEula /WaitForIdle" `
            -NoNewWindow `
            -Wait

      - name: Run Net-SSLeay test suite
        run: |
          cd p5-net-ssleay
          Get-Command perl
          $Env:Path
          echo n | perl Makefile.PL

          Start-Process `
            -FilePath $make `
            -NoNewWindow `
            -Wait

          Start-Process `
            -FilePath $make `
            -ArgumentList "test" `
            -NoNewWindow `
            -Wait

          cd ..

      - name: Stop Process Monitor
        run: |
          Start-Process `
            -FilePath Procmon64.exe `
            -ArgumentList "/AcceptEula /Terminate" `
            -NoNewWindow `
            -Wait

      - name: Extract list of accessed Strawberry Perl paths
        run: |
          Start-Process `
            -FilePath Procmon64.exe `
            -ArgumentList "/AcceptEula /OpenLog test.pml /SaveAs test.csv" `
            -NoNewWindow `
            -Wait

          Import-Csv test.csv | Select Path -Unique | Sort Path

      - name: Debug shell
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
